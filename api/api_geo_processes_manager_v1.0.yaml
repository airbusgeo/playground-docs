openapi: 3.0.0

#
# Info
#
info:
  title: Geo Processes Manager API
  description: |
    Airbus Defence and Space "Geo Processes Manager" API specification.

    The processes manager is reponsible for registering, monitoring and
    operating processes.

    A job is a unitary execution of a process.

    A process may be an unitary processing or a composition of several tasks.
    In the later case, the tasks workflow management can be specific to the process
    or delegated to the process manager which is also specific to the geo process
    manager implementation. Workflow implementation is not covered by this API.

    Processes have to implement the "Geo Process" API specification.
  contact:
    name: Airbus Defence and Space
    url: 'https://www.airbus.com/'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
  x-logo:
    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png


#
# Tags
#
tags:
  - name: Mandatory
    description: |
      Mandatory resources.
      Defines the main entry point of the service.
  - name: Catalog
    description: |
      Processes catalog.
  - name: Jobs
    description: |
      Processes execution management.

#
# Security
#
security:
  - bearerAuth: []

#
# Paths
#
paths:
  #
  # OpenAPI schema
  #
  /api/v1/openapi:
    get:
      tags:
        - Mandatory
      summary: Open API specification of this service in YAML format
      description: |
        Returns Open API specification of this service in YAML format.
        Subset of this API with implemented services.
      responses:
        '200':
          description: Process Open API web UI.

  #
  # Process list and creation
  #
  /api/v1/processes:
    get:
      parameters:
        - in: query
          name: family
          required: false
          schema:
            type: string
          description: Filter processes by family.
        - in: query
          name: keywords
          required: false
          schema:
            type: string
          description: Filter processes by keywords as coma separated string.
        - in: query
          name: organization
          required: false
          schema:
            type: string
          description: Filter processes by organization.
        - name: page
          in: query
          description: Page ID
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
      tags:
        - Catalog
      summary: List all available process services
      description: |
        Return the list of all registered process services that are available
        for current user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessListResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Catalog
      summary: Register a new process service
      description: Register a process service for further execution
      requestBody:
        description: |
          Process description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRef'
      responses:
        '201':
          description: Process has been registered
          headers:
            Location:
              schema:
                type: string
              description: URI of the created process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Process management
  #
  '/api/v1/processes/{processId}':
    get:
      tags:
        - Catalog
      summary: Find process by ID
      description: Return a single process
      parameters:
        - name: processId
          in: path
          description: ID of process to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Catalog
      summary: Update an existing process service
      description: Update an existing process service
      parameters:
        - name: processId
          in: path
          description: ID of process to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: |
          Process description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRef'
      responses:
        '201':
          description: Process has been updated
          headers:
            Location:
              schema:
                type: string
              description: URI of the updated process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Catalog
      summary: Delete a process
      description: |
        Definitively remove a process service from the platform. Note : This
        command will need great care as we do not want to remove a process
        which has associated jobs. Some preventive checks should be made
        here, the process itself should only be "marked for deletion" until
        we are sure we can remove it.
      parameters:
        - name: processId
          in: path
          description: Process ID to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Process marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessSummaryResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job list for all processes
  #
  /api/v1/jobs:
    get:
      tags:
        - Jobs
      summary: List available jobs
      description: Return the list of all available jobs for this context
      parameters:
        - name: page
          in: query
          description: Page ID
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job list and creation for one process
  #
  '/api/v1/processes/{processId}/jobs':
    get:
      tags:
        - Jobs
      summary: List process' jobs
      description: Return the list of all process' jobs
      parameters:
        - name: processId
          in: path
          description: ID of process to get input return
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page ID
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Jobs
      summary: Request for a job execution
      description: Make a job request that should be queued for future execution
      parameters:
        - name: processId
          in: path
          description: ID of process to get input return
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: X-Correlation-ID
          description: System wide request identifier.
          schema:
            type: string
        - in: header
          name: X-ADS-Debug
          description: Enable debug mode.
          schema:
            type: boolean
      responses:
        '201':
          description: Job request queued
          headers:
            Location:
              schema:
                type: string
              description: URI of the job process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: |
          Process input parameters as defined by the JSON Schema in the input
          attribute of the description resource.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Input'

  #
  # Job management
  #
  '/api/v1/processes/{processId}/jobs/{jobId}':
    get:
      tags:
        - Jobs
      summary: Find jobs by ID
      description: Returns a single job
      parameters:
        - name: processId
          in: path
          description: ID of job's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: Kill any running job associated to this id and delete execution details
      parameters:
        - name: processId
          in: path
          description: ID of job's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of job to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Job marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSummaryResource'
        '204':
          description: Job killed and removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job technical metadata
  #
  '/api/v1/processes/{processId}/jobs/{jobId}/technical':
    get:
      tags:
        - Jobs
      summary: Get a job's technical metadatas.
      description: Returns a job's technical metadatas description.
      parameters:
        - name: processId
          in: path
          description: ID of job's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadatas'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job task list
  #
  '/api/v1/processes/{processId}/jobs/{jobId}/tasks':
    get:
      tags:
        - Jobs
      summary: List job's task
      description: Return the list of all registered tasks for current job
      parameters:
        - name: processId
          in: path
          description: ID of tasks' process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of tasks' job
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Status
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page ID
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job task informations
  #
  '/api/v1/processes/{processId}/jobs/{jobId}/tasks/{taskId}':
    get:
      tags:
        - Jobs
      summary: Find task by ID
      description: Returns a single task
      parameters:
        - name: processId
          in: path
          description: ID of task's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of task's job
          required: true
          schema:
            type: string
            format: uuid
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDescribeResource'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#
# Components
#
components:

  #
  # Security
  #
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #
  # Schemas
  #
  schemas:

    #
    # ProcessListResource schema
    #
    ProcessListResource:
      allOf:
        - $ref: '#/components/schemas/ListResource'
        - type: object
          required:
              - processes
          properties:
            processes:
              type: array
              items:
                $ref: '#/components/schemas/ProcessSummaryResource'

    #
    # ProcessRef schema
    #
    ProcessRef:
      description: |
        Reference to a new process (docker image or external instance that
        exposes a valid describe API endpoint).
      type: object
      required:
        - type
        - reference
      properties:
        type:
          description: Reference type
          type: string
          enum:
            - dockerImage
            - externalInstance
          example: dockerImage
        reference:
          description: Reference value
          type: string
          example: 'eu.gcr.io/myproject/cat-detection:latest'

    #
    # ProcessSummary schema
    #
    ProcessSummary:
      description: |
        Process summary.
      type: object
      required:
        - id
        - name
        - title
        - family
        - version
        - description
        - organization
        - email
      properties:
        id:
          description: Unique identifier of the process (usually an uuid).
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Technical name of the process. May be the Docker image name.
          type: string
          example: 'eu.gcr.io/myproject/cat-detection:latest'
        title:
          description: The title of the process.
          type: string
          example: Cat detection
        family:
          description: The process family.
          type: string
          example: object-detection
        version:
          description: The version of the process.
          type: string
          example: 1
        description:
          description: Gives a description of the process.
          type: string
          example: Detect cats on tiles
        organization:
          description: Identifier of the organization or entity publishing the process.
          type: string
          example: Airbus DS
        email:
          description: Contact email.
          type: string
          format: email
          example: cat-detection@airbus.com
        keywords:
          description: List of keywords.
          type: array
          items:
            type: string
          example:
            - cat
            - dog

    #
    # ProcessSummaryResource schema
    #
    ProcessSummaryResource:
      allOf:
        - $ref: '#/components/schemas/ProcessSummary'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/ItemLinks'

    #
    # ProcessDescribe schema
    #
    ProcessDescribe:
      description: |
        Process description.
      allOf:
        - $ref: '#/components/schemas/ProcessSummary'
        - type: object
          required:
            - resources
            - input
            - output
            - asynchronous
          properties:
            template:
              description: Template name for predefined interfaces.
              type: string
              example: cat-detection
            resources:
              $ref: '#/components/schemas/Resources'
            input:
              $ref: '#/components/schemas/InputSchema'
            output:
              $ref: '#/components/schemas/Output'
            config:
              description: Process execution configuration interface.
              type: object
              format: application/schema+json
            asynchronous:
              description: True if asynchronous mode provided.
              type: boolean
              default: false
              example: false

    #
    # ProcessDescribeResource schema
    #
    ProcessDescribeResource:
      allOf:
        - $ref: '#/components/schemas/ProcessDescribe'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/ProcessLinks'

    #
    # Resources schema
    #
    Resources:
      description: |
        Hardware resources needed to execute the process service.
      type: object
      required:
        - cpu
        - ram
      properties:
        cpu:
          description: Number of CPU cores.
          type: integer
          example: 2
        cpuArch:
          description: CPU architecture, the default value is amd64.
          type: string
          enum: [amd64, arm64]
          example: amd64
        cpuPlatform:
          description: Minimum CPU microarchitecture platform.
          type: string
          example: Haswell
        gpu:
          description: Number of GPU cores.
          type: integer
          example: 0
        ram:
          description: Size of RAM (bytes).
          type: integer
          example: 2097152 # 2 Gb

    #
    # Output schema
    #
    Output:
      description: |
        Output interface definition.
      type: object
      required:
        - description
        - contents
      properties:
        description:
          description: A description of the interface.
          type: string
          example: Tile object detection output
        headers:
          description: |
            Maps a header name to its definition. RFC7230 states header names
            are case insensitive. If a response header is defined with
            the name "Content-Type", it SHALL be ignored.
          type: object
        content:
          description: |
            A list of all possible contents as a map with key as content type

            (MIME type) and value as object (json schema) or string
            (description)

            for contents that do not need an extra definition (as for image/jpeg

            or application/geo+json).


            If a content is of type JSON (key as application/json) the value
            might

            be a JSON Schema object with ADS metadata extensions.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MediaTypeObject'
          example:
            application/geo+json: {}
            image/png: {}
        links:
          description: |
            A map of operations links that can be followed from the response.
            The key of the map is a short name for the link, following
            the naming constraints of the names for Component Objects.
          type: object

    #
    # MediaTypeObject schema
    #
    MediaTypeObject:
      description: |
        Each Media Type Object provides schema and examples for the media type
        identified by its key.
      type: object
      required:
        - schema
      properties:
        schema:
          description: The schema defining the type used for the request body.
          type: object
        example:
          description: |
            Example of the media type. The example object SHOULD be in the
            correct

            format as specified by the media type. The example object is
            mutually

            exclusive of the examples object. Furthermore, if referencing a
            schema

            which contains an example, the example value SHALL override the
            example

            provided by the schema.
          type: object
        examples:
          description: |
            Examples of the media type. Each example object SHOULD match the
            media

            type and specified schema if present. The examples object is
            mutually

            exclusive of the example object. Furthermore, if referencing a
            schema

            which contains an example, the examples value SHALL override the
            example

            provided by the schema.
          type: string
          additionalProperties:
            type: object
        encoding:
          description: |
            A map between a property name and its encoding information. The key,
            being

            the property name, MUST exist in the schema as a property. The
            encoding

            object SHALL only apply to requestBody objects when the media type
            is multipart

            or application/x-www-form-urlencoded.
          type: string
          additionalProperties:
            type: string

    #
    # InputSchema schema
    #
    InputSchema:
      description: |
        Process execution input interface.
        JSON Schema object with ADS metadata extensions.
      type: object
      format: application/schema+json
      example:
        {
          "$schema": "http://json-schema.org/draft-06/schema#",
          "title": "tile-object-detection-input",
          "description": "Geo Process API input schema for tile object detection",
          "type": "object",
          "required": [
            "zoom",
            "tile"
          ],
          "properties": {
            "zoom": {
              "description": "Tile zoom level",
              "type": "integer",
              "minimum": 1,
              "maximum": 20
            },
            "tile": {
              "description": "The tile image base64 encoded, may be JPEG or PNG format",
              "type": "string",
              "format": "base64"
            }
          }
        }

    #
    # Input schema
    #
    Input:
      description: |
        Process execution input payload (compliant with process.input json
        schema).
      type: object
      format: application/json
      example:
        zoom: 16
        tile: dGlsZXRvcHJvY2Vzcw==

    #
    # JobListResource schema
    #
    JobListResource:
      allOf:
        - $ref: '#/components/schemas/ListResource'
        - type: object
          required:
              - jobs
          properties:
            jobs:
              type: array
              items:
                $ref: '#/components/schemas/JobSummaryResource'

    #
    # Job schema
    #
    Job:
      type: object
      required:
        - processId
        - id
        - creationDate
      properties:
        creationDate:
          type: integer
          format: int64
          example: 1522067881
        startDate:
          type: integer
          format: int64
          example: 1522067882
        endDate:
          type: integer
          format: int64
          example: 1522067883
        processId:
          type: string
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        id:
          type: string
          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b


    #
    # JobSummary schema
    #
    JobSummary:
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            nbTasks:
              type: integer
              example: 4
            nbTasksPerStatus:
              type: array
              items:
                $ref: '#/components/schemas/TaskCountByStatus'

    #
    # JobSummaryResource schema
    #
    JobSummaryResource:
      allOf:
        - $ref: '#/components/schemas/JobSummary'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/ItemLinks'

    #
    # JobDescribe schema
    #
    JobDescribe:
      allOf:
        - $ref: '#/components/schemas/JobSummary'
        - type: object
          required:
            - status
          properties:
            status:
              $ref: '#/components/schemas/Status'
            message:
              type: string
              example: process image 12345
            userMetadatas:
              $ref: '#/components/schemas/Metadatas'
            input:
              $ref: '#/components/schemas/Input'
            asynchronous:
              description: True if asynchronous mode provided.
              type: boolean
              default: false
              example: false

    #
    # JobDescribeResource schema
    #
    JobDescribeResource:
      allOf:
        - $ref: '#/components/schemas/JobDescribe'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/JobLinks'

    #
    # TaskCountByStatus schema
    #
    TaskCountByStatus:
      type: object
      properties:
        count:
          type: integer
          example: 4
        status:
          description: Status of this tasks.
          type: string
          default: UNKNOWN
          enum:
            - UNKNOWN
            - ACCEPTED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - CANCELLED
            - PAUSED
          example: SUCCEEDED

    #
    # Metadatas schema
    #
    Metadatas:
      type: array
      items:
        type: object
        additionalProperties:
          type: string

    #
    # TaskListResource schema
    #
    TaskListResource:
      allOf:
        - $ref: '#/components/schemas/ListResource'
        - type: object
          required:
              - tasks
          properties:
            tasks:
              type: array
              items:
                $ref: '#/components/schemas/TaskSummaryResource'

    #
    # TaskDescribe schema
    #
    TaskDescribe:
      allOf:
        - $ref: '#/components/schemas/TaskSummary'
        - type: object
          properties:
            message:
              type: string
              example: process tile 234617
            asynchronous:
              description: True if asynchronous mode provided.
              type: boolean
              default: false
              example: false
            userMetadatas:
              type: array
              items:
                type: object
                additionalProperties:
                  type: string

    #
    # TaskDescribeResource schema
    #
    TaskDescribeResource:
      allOf:
        - $ref: '#/components/schemas/TaskDescribe'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/NavLinks'

    #
    # TaskSummary schema
    #
    TaskSummary:
      type: object
      required:
        - processId
        - jobId
        - id
        - creationDate
        - status
      properties:
        creationDate:
          type: integer
          format: int64
          example: 1522067881
        startDate:
          type: integer
          format: int64
          example: 1522067882
        endDate:
          type: integer
          format: int64
          example: 1522067883
        processId:
          type: string
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        jobId:
          type: string
          format: uuid
          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
        id:
          type: string
          format: uuid
          example: d77efb2c-30f3-11e8-b467-0ed5f89f718b
        status:
          $ref: '#/components/schemas/TaskStatus'

    #
    # TaskSummaryResource schema
    #
    TaskSummaryResource:
      allOf:
        - $ref: '#/components/schemas/TaskSummary'
        - type: object
          required:
            - _links
          properties:
            _links:
              $ref: '#/components/schemas/NavLinks'

    #
    # Status schema
    #
    Status:
      description: |
        Status of a process execution
      type: object
      required:
        - status
        - progress
      properties:
        status:
          description: Status of this execution.
          type: string
          default: UNKNOWN
          enum:
            - UNKNOWN
            - ACCEPTED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - CANCELLED
            - PAUSED
          example: SUCCEEDED
        progress:
          description: Progress in % of this execution.
          type: integer
          example: 100

    #
    # TaskStatus schema
    #
    TaskStatus:
      type: object
      required:
        - status
        - progress
      properties:
        errorMsg:
          type: string
          example: unable to get tile 54689
        modifiedAt:
          type: integer
          format: int64
          example: 1522067884
        node:
          $ref: '#/components/schemas/Node'
        stats:
          $ref: '#/components/schemas/Stats'
        status:
          description: Status of this execution.
          type: string
          default: UNKNOWN
          enum:
            - UNKNOWN
            - ACCEPTED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - CANCELLED
            - PAUSED
          example: RUNNING
        progress:
          description: Progress in % of this execution.
          type: integer
          example: 89

    #
    # Node schema
    #
    Node:
      type: object
      properties:
        containerId:
          type: string
          example: f3f31194706e

    #
    # Stats schema
    #
    Stats:
      type: object
      properties:
        duration:
          type: integer
          format: int64
          example: 125

    #
    # ListResource schema
    #
    ListResource:
      type: object
      required:
        - _links
      properties:
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'

    #
    # NavLinks schema
    #
    NavLinks:
      description: |
        Links to related resources.
      type: object
      required:
        - self
      properties:
        self:
          # Current page reference.
          $ref: '#/components/schemas/Reference'
        next:
          # Next page reference.
          $ref: '#/components/schemas/Reference'
        prev:
          # Previous page reference
          $ref: '#/components/schemas/Reference'
        first:
          # First page reference.
          $ref: '#/components/schemas/Reference'
        last:
          # Last page reference
          $ref: '#/components/schemas/Reference'

    #
    # ItemLinks schema
    #
    ItemLinks:
      description: |
        Links for single resource.
      type: object
      required:
        - self
      properties:
        self:
          # Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          # List similar resource references.
          $ref: '#/components/schemas/Reference'

    #
    # ProcessLinks schema
    #
    ProcessLinks:
      description: |
        Links for single process.
      type: object
      required:
        - self
      properties:
        self:
          # Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          # List similar resource references.
          $ref: '#/components/schemas/Reference'
        jobs:
          # List of associated jobs.
          $ref: '#/components/schemas/Reference'
        runNewJob:
          # POST ressource to launch a job for this process.
          $ref: '#/components/schemas/Reference'
        update:
          # PUT ressource to update this process.
          $ref: '#/components/schemas/Reference'
        delete:
          # DELETE ressource to delete this process.
          $ref: '#/components/schemas/Reference'

    #
    # JobLinks schema
    #
    JobLinks:
      description: |
        Links for single job.
      type: object
      required:
        - self
      properties:
        self:
          # Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          # List similar resource references.
          $ref: '#/components/schemas/Reference'
        tasks:
          # List of associated tasks.
          $ref: '#/components/schemas/Reference'
        runNewJob:
          # POST ressource to launch a new job for this process.
          $ref: '#/components/schemas/Reference'
        delete:
          # DELETE ressource to delete this job.
          $ref: '#/components/schemas/Reference'
        recordsAsGeojson:
          # Download a GeoJSON file of generated records.
          $ref: '#/components/schemas/Reference'

    #
    # Reference schema
    #
    Reference:
      description: |
        Reference object.
      type: object
      required:
        - href
      properties:
        relation:
          description: Description of the relation.
          type: string
          example: myrelation
        href:
          description: Determine the target URI of the related resource.
          type: string
          format: uri
          example: |
            http://myservice.com/api/v1/processes/15c61933-0b06-442c-8bab-723b2b41f570
        type:
          description: Expected content type of the response of the reference.
          type: string
          example: application/json
        method:
          # GET if omitted.
          $ref: '#/components/schemas/ReferenceMethod'

    #
    # ReferenceMethod schema
    #
    ReferenceMethod:
      description: |
        HTTP verbs to access resources.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
      example: GET

    #
    # Error schema
    #
    Error:
      description: |
        Error returned when request fails
      type: object
      required:
        - message
      properties:
        message:
          description: End user error description.
          type: string
          example: Something went wrong!
        hint:
          description: Internal / developper error message (no trace).
          type: string
          example: Class CatDetection threw an exception on line 125
        correlationId:
          description: System request identifier from request header.
          type: string
          example: run-1258
        timestamp:
          description: Error timestamp.
          type: string
          example: 1522067885