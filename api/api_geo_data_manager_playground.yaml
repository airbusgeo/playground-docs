openapi: 3.0.0

#
# Info
#
info:
  title: Geo Data Manager API for OneAtlas Playground
  description: |
    Airbus Defence and Space "Geo Data Manager" API specification for OneAtlas Playground.
    The data manager is reponsible for managing datasets, zones, tags and records.
    - A dataset gather zones, jobs and records.
    - A zone corresponds to an AOI (Area of Interest) on selected image(s).
    - A tag classifies records.
    - A record may be a manually created object representing ground truth or the result of a processing.
  contact:
    name: Airbus Defence and Space
    url: 'https://www.airbus.com/'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  x-logo:
    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png

#
# Servers
#
servers:
  - url: https://api.playground.airbusds-geo.com
    description: OneAtlas Playground production server

#
# Tags
#
tags:
  - name: Mandatory
    description: |
      Mandatory resources.
      Defines the main entry point of the service.
  - name: Projects
    description: |
      Project management.
  - name: Datasets
    description: |
      Dataset management.
  - name: Zones
    description: |
      Zone management.
  # - name: Tags
  #   description: |
  #     Tag management.
  - name: Records
    description: |
      Record management.
  - name: Exports
    description: |
      Export management.
#
# Security
#
security:
  - bearerAuth: []

#
# Paths
#
paths:
  #
  # OpenAPI schema
  #
  /api/v1/openapi:
    get:
      tags:
        - Mandatory
      summary: Open API specification of this service in YAML format
      description: |
        Returns Open API specification of this service in YAML format.
        Subset of this API with implemented services.
      responses:
        '200':
          description: Get Data Manager API for Playground.

  #
  # Project list
  #
  /api/v1/projects:
    get:
      parameters:
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: string
        - name: itemsPerPage
          in: query
          description: "Page size. Default: 10, max: 100."
          required: false
          schema:
            type: string
      tags:
        - Projects
      summary: List all available projects
      description: |
        Return the list of all projects that are available
        for current user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Dataset list and creation
  #
  /api/v1/datasets:
    get:
      parameters:
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: integer
        - name: itemsPerPage
          in: query
          description: "Page size. Default: 10, max: 100."
          required: false
          schema:
            type: integer
      tags:
        - Datasets
      summary: List all available datasets
      description: |
        Return the list of all datasets for the given project
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasets'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Datasets
      summary: Add a new dataset
      description: Add a new dataset
      requestBody:
        description: |
          Dataset description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetInput'
      responses:
        '201':
          description: Dataset has been registered
          headers:
            Location:
              schema:
                type: string
              description: URI of the created dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Dataset management
  #
  '/api/v1/datasets/{datasetId}':
    get:
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset to return
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Datasets
      summary: Find dataset by ID
      description: Return a single dataset
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset to update
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Datasets
      summary: Update an existing dataset
      description: Update an existing dataset
      requestBody:
        description: |
          Dataset description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetInput'
      responses:
        '201':
          description: Dataset has been updated
          headers:
            Location:
              schema:
                type: string
              description: URI of the updated dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: datasetId
          in: path
          description: Dataset ID to delete
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Datasets
      summary: Delete a dataset
      description: |
        Definitively remove a dataset from the platform.
      responses:
        '202':
          description: Dataset marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSummary'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Zone list and creation
  #
  '/api/v1/zones':
    get:
      parameters:
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: integer
        - name: itemsPerPage
          in: query
          description: "Page size. Default: 10, max: 100."
          required: false
          schema:
            type: integer
        - name: datasetId
          in: query
          description: Dataset ID
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Status of the zone. See ZoneStatus definition.
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - LABELLIZED
              - RESERVED
            example: LABELLIZED
      tags:
        - Zones
      summary: List all available zones
      description: |
        Return the list of all zones for the given project
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zones'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  #
  # Zone management
  #
  '/api/v1/zones/{zoneId}':
    get:
      parameters:
        - name: zoneId
          in: path
          description: ID of zone to return
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Zones
      summary: Find zone by ID
      description: Return a single zone
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      parameters:
        - name: zoneId
          in: path
          description: ID of zone to update
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Zones
      summary: Update an existing zone
      description: Update an existing zone
      requestBody:
        description: |
          Zone description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneUpdate'
      responses:
        '201':
          description: Zone has been updated
          headers:
            Location:
              schema:
                type: string
              description: URI of the updated zone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Record list and creation for one record
  #
  # /api/v1/records/{datasetId}:
  #   get:
  #     tags:
  #       - Records
  #     summary: List all records
  #     description: Return the list of all records
  #     parameters:
  #       - name: datasetId
  #         in: path
  #         description: Dataset ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: projectId
  #         in: query
  #         description: Project ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: page
  #         in: query
  #         description: "Page number. Default: 1."
  #         required: false
  #         schema:
  #           type: string
  #       - name: itemsPerPage
  #         in: query
  #         description: "Page size. Default: 10, max: 100."
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Records'
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '401':
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '403':
  #         description: Forbidden
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #   post:
  #     tags:
  #       - Records
  #     summary: Create a record
  #     description: Create a record
  #     parameters:
  #       - name: datasetId
  #         in: path
  #         description:  Dataset ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: projectId
  #         in: query
  #         description: Project ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - in: header
  #         name: X-Correlation-ID
  #         description: System wide request identifier.
  #         schema:
  #           type: string
  #       - in: header
  #         name: X-ADS-Debug
  #         description: Enable debug mode.
  #         schema:
  #           type: boolean
  #     responses:
  #       '201':
  #         description: Record added
  #         headers:
  #           Location:
  #             schema:
  #               type: string
  #             description: URI of the record
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RecordDescribe'
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '401':
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '403':
  #         description: Forbidden
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '405':
  #         description: Invalid input
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #     requestBody:
  #       description: Record description
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RecordDescribe'

  #
  # Record management
  #
  # /api/v1/records/{datasetId}/{recordId}:
  #   get:
  #     tags:
  #       - Records
  #     summary: Find record by ID
  #     description: Returns a single record
  #     parameters:
  #       - name: datasetId
  #         in: path
  #         description: Dataset ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: recordId
  #         in: path
  #         description: ID of record to return
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: projectId
  #         in: query
  #         description: Project ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RecordDescribe'
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '401':
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '403':
  #         description: Forbidden
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #   delete:
  #     tags:
  #       - Records
  #     summary: Delete a record
  #     description: Delete a record
  #     parameters:
  #       - name: datasetId
  #         in: path
  #         description: Dataset ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: recordId
  #         in: path
  #         description: ID of record to delete
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #       - name: projectId
  #         in: query
  #         description: Project ID
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     responses:
  #       '202':
  #         description: Record deleted
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RecordSummary'
  #       '204':
  #         description: Record deleted
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RecordDescribe'
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '401':
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '403':
  #         description: Forbidden
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'

  #
  # Record export
  #
  '/api/v1/records/{datasetId}/export':
    get:
      tags:
        - Records
      summary: Export records
      description: Export records. datasetId or jobId has to be specified in the query.
      parameters:
        - name: datasetId
          in: path
          description: Dataset ID
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: Export type. See RecordExportType definition.
          required: true
          schema:
            type: string
            enum:
              - geojson
              - kml
            example: geojson
        - name: jobId
          in: query
          description: Job ID to filter export to a job.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/responses/GeoJSON'
            application/vnd.google-earth.kml+xml:
              schema:
                $ref: '#/components/responses/KML'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  #
  # Export management
  #
  '/api/v1/exports':
    get:
      tags:
        - Exports
      summary: List all available exports
      description: Return the list of all exports for the given project
      parameters:
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: integer
        - name: itemsPerPage
          in: query
          description: "Page size. Default: 10, max: 100."
          required: false
          schema:
            type: integer
        - name: exportType
          in: query
          description: Export type. See ExportType definition.
          required: false
          schema:
            type: string
            format: uuid
            enum:
              - Dataset
              - Job
            example: LABELLIZED
        - name: status
          in: query
          description: Status of the zone. See ExportStatus definition.
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - RUNNING
              - SUCCEEDED
              - FAILED
            example: RUNNING
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exports'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
  '/api/v1/exports/{exportId}':
    get:
      tags:
        - Exports
      summary: Find export by ID
      description: Return a single export
      parameters:
        - name: exportId
          in: path
          description: ID of export to return
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  
  '/api/v1/exports/dataset/{datasetId}':  
    post:
      tags:
        - Exports
      summary: Create a new dataset export
      description: Create a new export
      parameters:
        - name: datasetId
          in: path
          description: dataset ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Export description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportInput'
      responses:
        '201':
          description: Export has been registered
          headers:
            Location:
              schema:
                type: string
              description: URI of the created dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  
  '/api/v1/exports/job/{jobId}':  
    post:
      tags:
        - Exports
      summary: Create a new job export
      description: Create a new export
      parameters:
        - name: jobId
          in: path
          description: job ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Export description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportInput'
      responses:
        '201':
          description: Export has been registered
          headers:
            Location:
              schema:
                type: string
              description: URI of the created dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#
# Components
#
components:

  #
  # Security
  #
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #
  # Responses
  #
  responses:
    GeoJSON:
      description: GeoJSON.

    KML:
      description: KML.

  #
  # Schemas
  #
  schemas:

    #
    # Projects schema
    #
    Projects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'

    #
    # ProjectSummary schema
    #
    ProjectSummary:
      description: |
        Project summary.
      type: object
      required:
        - projectId
        - name
        - description
        - creationDate
      properties:
        projectId:
          description: Unique identifier of the project.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the project.
          type: string
          example: 'Ship detection qualification'
        description:
          description: Description of the project.
          type: string
          example: 'Qualification sandbox for ship detection'
        creationDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        _links:
          $ref: '#/components/schemas/ProjectLinks'

    #
    # Datasets schema
    #
    Datasets:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/DatasetSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'
    
    #
    # Zones schema
    #
    Zones:
      type: object
      properties:
        zones:
          type: array
          items:
            $ref: '#/components/schemas/ZoneSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'
    
    #
    # Exports schema
    #
    Exports:
      type: object
      properties:
        exports:
          type: array
          items:
            $ref: '#/components/schemas/ExportSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'

    #
    # DatasetSummary schema
    #
    DatasetSummary:
      description: |
        Dataset summary.
      type: object
      required:
        - datasetId
        - projectId
        - name
        - description
        - creationDate
      properties:
        datasetId:
          description: Unique identifier of the dataset.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        projectId:
          description: Unique identifier of the project.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the dataset.
          type: string
          example: 'Ship detection v1.1'
        description:
          description: Description of the dataset.
          type: string
          example: 'Ship detection v1.1'
        creationDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        _links:
          $ref: '#/components/schemas/ItemLinks'

    #
    # DatasetDescribe schema
    #
    DatasetDescribe:
      description: |
        Dataset description.
      type: object
      required:
        - datasetId
        - projectId
        - name
        - description
        - creationDate
      properties:
        datasetId:
          description: Unique identifier of the dataset.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        projectId:
          description: Unique identifier of the project.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the dataset.
          type: string
          example: 'Ship detection v1.1'
        description:
          description: Description of the dataset.
          type: string
          example: 'Ship detection v1.1'
        creationDate:
          description: Creation date fo the dataset.
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        _links:
          $ref: '#/components/schemas/DatasetLinks'

    #
    # DatasetInput schema
    #
    DatasetInput:
      description: |
        Dataset creation and update.
      type: object
      required:
        - projectId
        - name
        - description
      properties:
        projectId:
          description: Unique identifier of the project.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the dataset.
          type: string
          example: 'Ship detection v1.1'
        description:
          description: Description of the dataset.
          type: string
          example: 'Ship detection v1.1'


    #
    # ZoneSummary schema
    #
    ZoneSummary:
      description: |
        Zone summary.
      type: object
      required:
        - zoneId
        - datasetId
        - name
        - creationDate
        - status
        - imageIds
        - geom
      properties:
        zoneId:
          description: Unique identifier of the zone.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        datasetId:
          description: Unique identifier of the dataset.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the zone.
          type: string
          example: 'South Africa'
        creationDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        status:
          description: Zone status. See ZoneStatus definition.
          type: string
          enum:
            - PENDING
            - LABELLIZED
            - RESERVED
          example: LABELLIZED
        imageIds:
          description: identifier for each image of the zone.
          type: array
          items:
            type: string
          example: ['3c4f2100a26f7f20cb04be0a8a56e0203aeb66c3']
        geom:
          description: Geometry of the zone as GeoJSON.
          type: object
        _links:
          $ref: '#/components/schemas/ItemLinks'

    #
    # ZoneDescribe schema
    #
    ZoneDescribe:
      description: |
        Zone description.
      type: object
      required:
        - zoneId
        - datasetId
        - name
        - creationDate
        - status
        - imageIds
        - geom
      properties:
        zoneId:
          description: Unique identifier of the zone.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        datasetId:
          description: Unique identifier of the dataset.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570
        name:
          description: Name of the zone.
          type: string
          example: 'South Africa'
        creationDate:
          description: Creation date fo the zone.
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        status:
          description: Zone status. See ZoneStatus definition.
          type: string
          enum:
            - PENDING
            - LABELLIZED
            - RESERVED
          example: LABELLIZED
        imageIds:
          description: identifier for each image of the zone.
          type: array
          items:
            type: string
          example: ['3c4f2100a26f7f20cb04be0a8a56e0203aeb66c3']
        geom:
          description: Geometry of the zone as GeoJSON.
          type: object
        _links:
          $ref: '#/components/schemas/ItemLinks'

    #
    # ZoneUpdate schema
    #
    ZoneUpdate:
      description: |
        Zone update.
      type: object
      properties:
        name:
          description: Name of the zone.
          type: string
          example: 'Toulouse'
        description:
          description: Description of the zone.
          type: string
          example: 'Toulouse area'
        status:
          description: Zone status
          type: string
          enum:
            - PENDING
            - LABELLIZED
            - RESERVED
          example: LABELLIZED

    #
    # ZoneStatus schema
    #
    ZoneStatus:
      description: |
        Zone status.
      type: string
      enum:
        - PENDING
        - LABELLIZED
        - RESERVED
      example: LABELLIZED


    #
    # ExportSummary schema
    #
    ExportSummary:
      description: |
        Export summary.
      type: object
      required:
        - exportId
        - exportType
        - name
        - creationDate
        - status
      properties:
        exportId:
          description: Unique identifier of the export.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        exportType:
          description: Export type. See ExportType definition.
          type: string
          enum:
            - Dataset
            - Job
          example: Dataset
        name:
          description: Name of the export.
          type: string
          example: 'South Africa'
        creationDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        status:
          description: Export status. See ExportStatus definition.
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
          example: RUNNING
        _links:
          $ref: '#/components/schemas/ItemLinks'

    #
    # ExportDescribe schema
    #
    ExportDescribe:
      description: |
        Export description.
      type: object
      required:
        - exportId
        - exportType
        - name
        - creationDate
        - status
        - gsUrl
        - httpUrl
      properties:
        exportId:
          description: Unique identifier of the export.
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        exportType:
          description: Export type. See ExportType definition.
          type: string
          enum:
            - Dataset
            - Job
          example: Dataset
        name:
          description: Name of the export.
          type: string
          example: 'South Africa'
        creationDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        status:
          description: Export status. See ExportStatus definition.
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCEEDED
            - FAILED
          example: RUNNING
        _links:
          $ref: '#/components/schemas/ExportLinks'

    #
    # ExportInput schema
    #
    ExportInput:
      description: |
        Export creation.
      type: object
      required:
        - name
        - projectId
      properties:
        name:
          description: Name of the export.
          type: string
          example: 'Ship detection v1.1'
        projectId:
          description: Unique identifier of the project.
          type: string
          format: uuid
          example: 22c61933-0b06-442c-8bab-723b2b41f570

    #
    # ExportType schema
    #
    ExportType:
      description: |
        Export type.
      type: string
      enum:
        - Dataset
        - Job
      example: Dataset

    #
    # ExportStatus schema
    #
    ExportStatus:
      description: |
        Export status.
      type: string
      enum:
        - PENDING
        - RUNNING
        - SUCCEEDED
        - FAILED
      example: RUNNING


    #
    # RecordExportType schema
    #
    RecordExportType:
      description: |
        Record export type.
      type: string
      enum:
        - geojson
        - kml
      example: geojson

    #
    # Records schema
    #
    # Records:
    #   type: object
    #   properties:
    #     records:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/RecordSummary'
    #     count:
    #       type: integer
    #       example: 1
    #     total:
    #       type: integer
    #       example: 1
    #     _links:
    #       $ref: '#/components/schemas/NavLinks'

    #
    # RecordSummary schema
    #
    # RecordSummary:
    #   type: object
    #   required:
    #     - recordId
    #     - datasetId
    #     - jobId
    #     - creationDate
    #     - tags
    #     - state
    #   properties:
    #     recordId:
    #       description: Unique identifier of the record.
    #       type: string
    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
    #     datasetId:
    #       description: Unique identifier of the dataset.
    #       type: string
    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
    #     jobId:
    #       description: Unique identifier of the job.
    #       type: string
    #       example: 15c61933-0b06-442c-8bab-723b2b41f570
    #     creationDate:
    #       description: Date of the creation of this record.
    #       type: string
    #       format: date-time
    #       example: '2017-07-21T17:32:28Z'
    #     tags:
    #       description: List of tags.
    #       type: array
    #       items:
    #         type: string
    #       example: "['ship']"
    #     state:
    #       description: State of the record.
    #       $ref: '#/components/schemas/RecordState'
    #     _links:
    #       $ref: '#/components/schemas/ItemLinks'

    #
    # RecordDescribe schema
    #
    # RecordDescribe:
    #   type: object
    #   required:
    #     - recordId
    #     - datasetId
    #     - jobId
    #     - creationDate
    #     - tags
    #     - state
    #     - geom
    #     - sourceIds
    #   properties:
    #     recordId:
    #       description: Unique identifier of the record.
    #       type: string
    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
    #     datasetId:
    #       description: Unique identifier of the dataset.
    #       type: string
    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
    #     jobId:
    #       description: Unique identifier of the job.
    #       type: string
    #       example: 15c61933-0b06-442c-8bab-723b2b41f570
    #     creationDate:
    #       description: Date of the creation of this record.
    #       type: string
    #       format: date-time
    #       example: '2017-07-21T17:32:28Z'
    #     tags:
    #       description: List of tags.
    #       type: array
    #       items:
    #         type: string
    #       example: ['ship']
    #     state:
    #       description: State of the record.
    #       $ref: '#/components/schemas/RecordState'
    #     geom:
    #       description: Geometry of the record as GeoJSON.
    #       type: object
    #     sourceIds:
    #       description: Source image of the record.
    #       type: array
    #       items:
    #         type: string
    #       example: ['DS_SPOT7_201806191033345_FR1_FR1_SV1_SV1_W003N37_01790']
    #     _links:
    #       $ref: '#/components/schemas/RecordLinks'

    #
    # RecordState schema
    #
    # RecordState:
    #   description: State of a record.
    #   type: string
    #   enum:
    #     - PREDICTED
    #     - MODIFIED
    #     - ADDED
    #     - DELETED
    #     - VERIFIED
    #   example: ADDED

    #
    # NavLinks schema
    #
    NavLinks:
      description: |
        Links to related resources.
      type: object
      required:
        - self
      properties:
        self:
          description: Current page reference.
          $ref: '#/components/schemas/Reference'
        next:
          description: Next page reference.
          $ref: '#/components/schemas/Reference'
        prev:
          description: Previous page reference
          $ref: '#/components/schemas/Reference'
        first:
          description: First page reference.
          $ref: '#/components/schemas/Reference'
        last:
          description: Last page reference
          $ref: '#/components/schemas/Reference'

    #
    # ItemLinks schema
    #
    ItemLinks:
      description: |
        Links for single resource.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'

    #
    # ProjectLinks schema
    #
    ProjectLinks:
      description: |
        Links for single project.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'
        datasets:
          description: List of associated datasets.
          $ref: '#/components/schemas/Reference'
        users:
          description: List of associated users.
          $ref: '#/components/schemas/Reference'
        processes:
          description: List of associated processes.
          $ref: '#/components/schemas/Reference'
        update:
          description: PUT ressource to update this project.
          $ref: '#/components/schemas/Reference'
        delete:
          description: DELETE ressource to delete this project.
          $ref: '#/components/schemas/Reference'

    #
    # DatasetLinks schema
    #
    DatasetLinks:
      description: |
        Links for single dataset.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'
        zones:
          description: List of associated zones.
          $ref: '#/components/schemas/Reference'
        #tags:
        #  description: List of associated tags.
        #  $ref: '#/components/schemas/Reference'
        jobs:
          description: List of associated jobs.
          $ref: '#/components/schemas/Reference'
        recordsAsGeojson:
          description: Download a zip file of GeoJSON records.
            The zip archive contains one file per zone.
            Only zones with 'LABELLIZED' status are exported.
          $ref: '#/components/schemas/Reference'
        update:
          description: PUT ressource to update this dataset.
          $ref: '#/components/schemas/Reference'
        delete:
          description: DELETE ressource to delete this dataset.
          $ref: '#/components/schemas/Reference'

    #
    # ExportLinks schema
    #
    ExportLinks:
      description: |
        Links for single export.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'
        gsUrl:
          description: Google Storage URL of the bucket.
          $ref: '#/components/schemas/Reference'
        httpUrl:
          description: HTTP URL of the bucket
          $ref: '#/components/schemas/Reference'

    #
    # RecordLinks schema
    #
    # RecordLinks:
    #   description: |
    #     Links for single record.
    #   type: object
    #   required:
    #     - self
    #   properties:
    #     self:
    #       description: Current resource reference.
    #       $ref: '#/components/schemas/Reference'
    #     list:
    #       description: List similar resource references.
    #       $ref: '#/components/schemas/Reference'
    #     zone:
    #       description: Associated zone.
    #       $ref: '#/components/schemas/Reference'
    #     tags:
    #       description: List of associated tags.
    #       $ref: '#/components/schemas/Reference'
    #     job:
    #       description: Associated job.
    #       $ref: '#/components/schemas/Reference'
    #     update:
    #       description: PUT ressource to update this record.
    #       $ref: '#/components/schemas/Reference'
    #     delete:
    #       description: DELETE ressource to delete this record.
    #       $ref: '#/components/schemas/Reference'

    #
    # Reference schema
    #
    Reference:
      description: |
        Reference object.
      type: object
      required:
        - href
      properties:
        relation:
          description: Description of the relation.
          type: string
          example: myrelation
        href:
          description: Determine the target URI of the related resource.
          type: string
          format: uri
          example: |
            http://myservice.com/api/v1/processes/15c61933-0b06-442c-8bab-723b2b41f570
        type:
          description: Expected content type of the response of the reference.
          type: string
          example: application/json
        method:
          description: |
            HTTP verb to distinguish between several possible actions on the
            same ressource. GET if omitted.
          $ref: '#/components/schemas/ReferenceMethod'

    #
    # ReferenceMethod schema
    #
    ReferenceMethod:
      description: |
        HTTP verbs to access resources.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
      example: GET

    #
    # Error schema
    #
    Error:
      description: |
        Error returned when request fails
      type: object
      required:
        - message
      properties:
        message:
          description: End user error description.
          type: string
          example: Something went wrong!
        hint:
          description: Internal / developper error message (no trace).
          type: string
          example: Class CatDetection threw an exception on line 125
        correlationId:
          description: System request identifier from request header.
          type: string
          example: run-1258
        timestamp:
          description: Error timestamp.
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
