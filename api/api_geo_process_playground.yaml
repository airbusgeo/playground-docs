openapi: 3.0.0

#
# Info
#
info:
  title: Geo Process API
  description: |
    This document describes the Airbus Defence and Space "Geo Process" API specification.
    Geo Process services that are provided to or from Airbus Defense and Space should implement this specification.

    The default execution mode for Geo Process Services is synchronous.
    An optional asynchronous mode for long running processes and process that returns huge amount of data may be implemented.

    This API provides two endpoints with a fixed path /api/v1/openapi and /api/v1/describe.
    The path prefix for the others endpoints are implementation specific, for example the /jobs endpoint could be implemented at /jobs or /mypath/jobs or /api/v1/jobs.
    As been the only fixed endpoint with implementation specific data, /api/v1/describe contains the _links attribute that has to reference all implemented endpoints for the service.
    With this main service entry and the provided links it is possible for a client to discover and address others endpoints of the service.

    The Intelligence Playground is an evaluation environment to test algorithms from Airbus and Partners on OneAtlas imagery .
  contact:
    name: Airbus Defence and Space
    url: 'https://www.airbus.com/'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
  x-logo:
    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png

#
# External docs
#
externalDocs:
  description: Intelligence Playground Documentation
  url: 'http://playground-docs.readthedocs.io'

#
# Tags
#
tags:
  - name: Mandatory
    description: |
      Mandatory resources.
      Defines the main entry point of the service.
  - name: Synchronous
    description: |
      Mandatory resources for the synchronous mode.
      Endpoints may be specific to each implementation.
      Referenced via the _links attribute of the describe resource.
  - name: Asynchronous
    description: |
      Mandatory resources for the asynchronous mode.
      Endpoints may be specific to each implementation.
      Referenced via the result of the process execution resource.
  - name: Optional
    description: |
      Optional, implementation specific resources for low level
      description and monitoring.
      Endpoints may be specific to each implementation.
      Referenced via the _links attribute of the describe resource.

#
# Paths
#
paths:
  #
  # OpenAPI schema
  #
  /api/v1/openapi:
    get:
      tags:
        - Mandatory
      summary: Open API specification of this service in YAML format
      description: |
        Returns Open API specification of this service in YAML format.
        Subset of this API with implemented services.
      responses:
        '200':
          description: Process Open API web UI.

  #
  # Describe
  #
  /api/v1/describe:
    get:
      tags:
        - Mandatory
      summary: Describes process service
      description: |
        Returns the description of the process.
      operationId: describe
      responses:
        '200':
          description: Process description.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Describe'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job execution
  #
  /jobs:
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    post:
      tags:
        - Synchronous
        - Asynchronous
      summary: Launch process execution
      description: |
        Execute the process.

        If synchronous process, the response contains a JSON object as defined
        in the output attribute of the description resource.

        If asynchronous process, the response contains a Reference JSON object
        containing the link to the job status resource. The client must call the
        resource defined the link to get execution status then results when
        available.
      operationId: process
      parameters:
        - in: header
          name: X-Correlation-ID
          description: System wide request identifier.
          schema:
            type: string
        - in: header
          name: X-ADS-Debug
          description: Enable debug mode.
          schema:
            type: boolean
      requestBody:
        description: |
          Process input parameters as defined by the JSON Schema in the input
          attribute of the description resource.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInput'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/OutputResponse'
                  - $ref: '#/components/schemas/Reference'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: |
            Service not available. Max number of simultaneous process execution
            reached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Asynchronous job management
  #
  '/jobs/{jobId}':
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    parameters:
      - name: jobId
        in: path
        description: Job identifier
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - Asynchronous
      summary: Cancel the given job execution
      operationId: delete_job
      responses:
        '204':
          $ref: '#/components/responses/JobDeleted'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Asynchronous job status
  #
  '/jobs/{jobId}/status':
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    parameters:
      - name: jobId
        in: path
        description: Job identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Asynchronous
      summary: Retrieve execution status
      description: |
        Retrieve the process status and available results if succeded.
      operationId: get_status
      responses:
        '200':
          description: Process execution status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Asynchronous job results management
  #
  '/jobs/{jobId}/results':
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    parameters:
      - name: jobId
        in: path
        description: Job identifier
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Asynchronous
      summary: Get job results
      description: |
        Retrieve results of the given job.
      operationId: get_results
      responses:
        '200':
          $ref: '#/components/schemas/JobResults'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Asynchronous
      summary: Delete all results
      description: |
        Delete all results.
      operationId: delete_results
      responses:
        '204':
          $ref: '#/components/responses/ResultDeleted'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Asynchronous job result management
  #
  '/jobs/{jobId}/results/{resultId}':
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    parameters:
      - name: jobId
        in: path
        description: Job identifier.
        required: true
        schema:
          type: string
          format: uuid
      - name: resultId
        in: path
        description: Result identifier.
        required: true
        schema:
          type: string
    get:
      tags:
        - Asynchronous
      summary: Retrieve a result
      description: |
        Retrieve a result from its id.
      operationId: get_result
      responses:
        '200':
          $ref: '#/components/responses/OutputResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Asynchronous
      summary: Delete a result
      description: |
        Delete a result from its id.
      operationId: delete_result
      responses:
        '204':
          $ref: '#/components/responses/ResultDeleted'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Instance versions
  #
  /version:
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    get:
      tags:
        - Optional
      summary: Low level version description
      description: |
        Implementation specific.
        Returns build, compiler or version control versions.
      operationId: version
      responses:
        '200':
          $ref: '#/components/responses/Version'

  #
  # Instance health check
  #
  /health:
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    get:
      tags:
        - Optional
      summary: Check if the service is alive
      description: |
        The response is a HTTP status code 200 containing in the body 'OK'.
      operationId: healthcheck
      responses:
        '200':
          $ref: '#/components/responses/Success'

  #
  # Instance metrics
  #
  /metrics:
    servers:
      - url: '/{customPath}'
        variables:
          customPath:
            default: ''
    get:
      tags:
        - Optional
      summary: Execution usage metrics
      description: |
        Implementation specific.
        Returns service usage metrics.
      operationId: metrics
      responses:
        '200':
          description: Service execution metrics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
        '500':
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#
# Components
#
components:

  #
  # Security
  #
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT #recommended

  #
  # Responses
  #
  responses:
    OutputResponse:
      description: |
        Process output as defined in the output attribute of the description resource.

    NotFound:
      description: Entity not found.

    JobDeleted:
      description: Job succesfully canceled.

    ResultDeleted:
      description: Result(s) succesfully deleted.

    InvalidInput:
      description: Invalid input for operation.

    NotAvailable:
      description: Service not available.

    Version:
      description: Version.
      content:
        text/plain:
          schema:
            type: string

    Success:
      description: Success. OK as content.
      content:
        text/plain:
          schema:
            type: string

  #
  # Schemas
  #
  schemas:

    #
    # Describe schema
    #
    Describe:
      description: |
        Process description.
      type: object
      required:
        - name
        - title
        - family
        - version
        - description
        - organization
        - email
        - requirements
        - capabilities
        - resources
        - input
        - output
        - asynchronous
        - _links
      properties:
        name:
          description: Technical name of the process. May be the Docker image name.
          type: string
          example: eu.gcr.io/myproject/cat-detection:latest
        title:
          description: The title of the process.
          type: string
          example: Cat detection
        family:
          description: The process family.
          type: string
          example: object-detection
        version:
          description: The version of the process.
          type: string
          example: 1.0
        description:
          description: Gives a description of the process.
          type: string
          example: Detect cats on tiles
        organization:
          description: Identifier of the organization or entity publishing the process.
          type: string
          example: Airbus DS
        email:
          description: Contact email.
          type: string
          example: cat-detection@airbus.com
        keywords:
          description: List of keywords or tags.
          type: array
          items:
            type: string
          example: [ "cat", "dog" ]
        template:
          description: Template name for predefined interfaces.
          type: string
          example: cat-detection
        requirements:
          description: Requirements of the process service
          $ref: '#/components/schemas/Requirements'
        capabilities:
          description: Capabilities of the process service
          $ref: '#/components/schemas/Capabilities'
        resources:
          description: Hardware resources needed for process execution.
          $ref: '#/components/schemas/Resources'
        input:
          description: |
            Process execution input interface.
            JSON Schema object with ADS metadata extensions.
          type: object
          format: application/schema+json
          example:
            {
              "$schema": "http://json-schema.org/draft-06/schema#",
              "title": "tile-object-detection-input",
              "description": "Geo Process API input schema for tile object detection",
              "type": "object",
              "required": [
                "zoom",
                "tile"
              ],
              "properties": {
                "zoom": {
                  "description": "Tile zoom level",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 20
                },
                "tile": {
                  "description": "The tile image base64 encoded, may be JPEG or PNG format",
                  "type": "string",
                  "contentEncoding": "base64"
                }
              }
            }
        output:
          description: Process execution output interface.
          $ref: '#/components/schemas/Output'
        config:
          description: Process execution configuration interface.
          type: object
          format: application/schema+json
        asynchronous:
          description: True if asynchronous mode provided.
          type: boolean
          default: false
          example: false
        batched:
          description: True if batched mode provided i.e. capable of receiving an array of payloads
          type: boolean
          default: false
          example: false
        _links:
          $ref: '#/components/schemas/Links'

    #
    # Requirements schema
    #
    Requirements:
      description: Description of the requirements of a processing service. 
      type: object
      required:
        - tile_size

      properties:
        tile_size:
          description: Expected size in pixels of the imagery tile that should be provided to the process service. The optimal value is the prefered size. The min and max parameters indicates the range of size in which the results are considered acceptable. If a strict tile size must be provided, all three numbers should be equals.
          type: object
          required:
            - optimal
            - min
            - max
          properties:
            optimal:
              description: Optimal size (in pixel) of the tile to be provided to the process service.
              type: float
              example: 768
            min:
              description: Minimal size (in pixel) of the tile to be provided to the process service.
              type: float
              example: 64
            optimal:
              description: Maximal size (in pixel) of the tile to be provided to the process service.
              type: float
              example: 2048   

        overlap_size:
          description: Expected overlap in pixels between two adjacent tiles of imagery.
          type: int
          example: 10
          default: 0

        number_of_images:
          description: How many images are expected by the process service (usually 1 image for object detection and 2 for change detection)
          type: int
          default: 1

        apply_fusion:
          description: |
            Defines how the output of the process service is to be fused with the results from the next overlapping tile.
            If the value is NONE, no fusion is applied. This is the default behavior. If the value is something else than NONE,
            then it indicates what should be done with the properties of the two fused objects.
          type: string
          default: NONE
          enum:
            - NONE
            - SELECT_BASED_ON_CONFIDENCE
            - SELECT_BASED_ON_AREA

        max_concurrent_requests:
          description: How many requests can the process service handle simultaneously.
          type: int
          default: 1

        duration_estimate:
          description: Estimated duration in seconds of process (with optimal hardware).
          type: int
          example: 720

        supported_image_type:
          description: The list of all image formats supported by the process service.
          type: array
          items:
            $ref: '#/components/schemas/ImageFormat'

        metadata:
          description: The list of metadata that the process service need to receive with each payload.
          type: object
          additionalProperties: true		
          properties:
            incidenceAngle:
              description: Angle between the angle of view of the image and the nadir
              type: float
              example: 4.57
            sunElevation:
              description: Angle between the horizon and the Sun direction at the time of image acquisition
              type: float
              example: 46.9
            sunAzimuth:
              description: Angle between the North and the Sun direction at the time of image acquisition
              type: float
              example: 173.5

        resolution:
          description: Resolution (in meters per pixel) of the imagery to be provided to process service. The optimal value is the prefered resolution. The min and max parameters indicates the range of resolution in which the results are considered acceptable. If a strict resolution must be provided, all three numbers should be equals.
          type: object
          required:
            - optimal
            - min
            - max
          properties:
            optimal:
              description: Optimal resolution (in meter per pixel) of the imagery to be provided to the process service.
              type: float
              example: 1.5
            min:
              description: Minimal resolution (in meter per pixel) of the imagery to be provided to the process service.
              type: float
              example: 0.5
            optimal:
              description: Maximal resolution (in meter per pixel) of the imagery to be provided to the process service.
              type: float
              example: 2.5

    #
    # Capabilities
    #
    Capabilities:
      description: |
        Description of the precise technical capabilities of the process service. 
        type: object
      required:
        - 
      properties:
        disclaimer:
          type: string
          description: 
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'

    #
    # Resources schema
    #
    Resources:
      description: |
        Hardware resources needed to execute the process service.
      type: object
      required:
        - gpu_enabled
        - cpu_enabled
        - ram
      properties:
        gpu_enabled:
          description: Is the process service capable of managing GPU ?
          type: boolean
          example: true
        cpu_enabled:
          description: Is the process service capable of running on CPU only ?
          type: boolean
          example: true
        cpu:
          description: Number of CPU cores.
          type: integer
          example: 2
        cpuArch:
          description: CPU architecture, the default value is amd64.
          type: string
          enum: [amd64, arm64]
          example: amd64
        cpuPlatform:
          description: Minimum CPU microarchitecture platform.
          type: string
          example: Haswell
        gpu:
          description: Number of GPU cores.
          type: integer
          example: 0
        ram:
          description: Size of RAM (bytes).
          type: integer
          example: 2097152 # 2 Gb
        static_memory:
          description: Required memory to process a single input.
          type: string
          example: "10MB"
        dynamic_memory:
          description: Required memory to process each additional input (when batching is available).
          type: string
          example: "5MB"
        max_batch_size:
          description: Max batch size.
          type: integer
          example: 10

    #
    # ImageFormat schema
    #
    ImageFormat:
      description: Description of the image formats supported by the process service.
      type: object
      required:
        - bit_depth
        - bands
        - format
      properties:
        bit_depth:
          description: Number of bits used to encode one pixel.
          type: int
          example: 8
        bands:
          description: Number and order of bands available for each pixel.
          type: string
          enum:
            - P
            - RGB
            - RGBI
        format:
          description: Format in which the imagery is provided
          type: string
          enum:
            - JPG
            - JP2
            - TIF
            - PNG

    #
    # Tags schema
    #

    Tags:
      type: object
      description: A tag defining the class of the detected object
      required:
        - title
      properties:
        title:
          type: string
          description: The name of the tag usually a simple string i.e. 'cat'
        description:
          type: string
          description: The precise description of this class i.e. for this process service 'cat' only applies to the domestic feline
        _links:
          $ref: '#/components/schemas/Links'

    #
    # Output schema
    #
    Output:
      description: Description of the output of the processing service. 
      type: object
      required:
        - content
      properties:
        description:
          description: The description of the format of the output.
          type: string
          enum:
            - application/json
            - image/png
        content:
          oneOf:
            application/json:
              schema:
                - $ref: '#/components/schemas/as-GeoJSON'
            image/png:
              schema:
                - $ref: '#/components/schemas/as-PNG'


    #
    # as-GeoJSON schema
    #

    as-GeoJSON:
      description: A GeoJSON FeatureCollection returning the results of the process service.
      type: object
      properties:
        type:
          type: string
          enum:
          - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/definitions/Detection'


    #
    # Detection schema
    #

    Detection:
      type: object
      description: A GeoJSON feature indicating one detection made by the process service.
      required:
        - geometry
        - properties
      properties:
        geometry:
          type: '#/components/schemas/Geometry'
          description: The geometry corresponding to the detection expressed in latitude / longitude in WGS84 
        properties:
          type: object
          description: The information associated to this specific detection
          required:
            - tags
          properties:
            confidence:
              type: float
              description: The confidence associated to this detection expressed as a value betwee 0.0 and 1.0 by the process service.
              example: 0.7
              default: 1.0
            tags:
              type: array
              items:
                type: string
            confidence_per_tag: 
              type: array
              items:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: float
            length:
              description: Length of the detected object in meters (if applicable).
              type: float
            width:
              description: Width of the detected object in meters (if applicable).
              type: float
            area:
              description: Surface of the detected object in squared meters.
              type: float
            heading:
              description: Heading of the detected object in degrees from the North (if applicable).
              type: float
            height:
              description: Height of the detected object on meters (if applicable).
              type: float


    #
    # Simplified Geometry schema
    #

    Geometry:
      type: object
      description: GeoJSON feature
      discriminator: type
      required:
        - type
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometry-objects
      properties:
        type:
          type: string
          enum:
            - Polygon
          description: The geometry types supported in the output. Currently only polygons are supported.

    #
    # as-PNG schema
    #

    as-PNG:
      description: A PNG image returning the results of the process service.
      type: string
      properties:
        contentEncoding:
          type: string
          enum:
          - base64
        contentMediaType:
          type: string
          enum:
            - image/png

    #
    # Links schema
    #
    Links:
      description: |
        Links to related resources.
      type: object
      required:
        - self
        - execution
      properties:
        self:
          description: The resource that return this process description.
          $ref: '#/components/schemas/Reference'
        execution:
          description: The target resource to execute this process.
          $ref: '#/components/schemas/Reference'
        config:
          description: The target resource to get / set configuration of this process.
          $ref: '#/components/schemas/Reference'
        version:
          description: |
            The target resource to get the API version implemented by this
            process.
          $ref: '#/components/schemas/Reference'
        health:
          description: The target resource to check health of this process.
          $ref: '#/components/schemas/Reference'
        metrics:
          description: The target resource to get usage metrics of this process.
          $ref: '#/components/schemas/Reference'
        icon:
          description: The target resource to retrieve the icon of this process.
          $ref: '#/components/schemas/Reference'
        license:
          description: The target resource to retrieve the license of this process.
          $ref: '#/components/schemas/Reference'
        documentation:
          description: The target resource to retrieve the documentation of this process.
          $ref: '#/components/schemas/Reference'

    #
    # Metrics schema
    #
    Metrics:
      description: |
        Process metrics.

        Implementation specific.
      type: object

    #
    # Status schema
    #
    Status:
      description: |
        Status of a process execution
      type: object
      required:
        - status
        - progress
      properties:
        status:
          description: Status of this execution.
          type: string
          default: UNKNOWN
          enum:
            - UNKNOWN
            - ACCEPTED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - CANCELLED
            - PAUSED
        progress:
          description: Progress in % of this execution.
          type: integer

    #
    # JobResults schema
    #
    JobResults:
      description: Results of this execution if succeded.
      type: array
      items:
        $ref: '#/components/schemas/Result'

    #
    # Result schema
    #
    Result:
      description: ''
      type: object
      required:
        - id
        - _link
      properties:
        id:
          description: Result identifier.
          type: string
        _link:
          $ref: '#/components/schemas/Reference'

    #
    # ProcessInput schema
    #
    ProcessInput:
      description: |
        Process input parameters as defined by the JSON Schema in the input
        attribute of the description resource.
      type: object

    #
    # Reference schema
    #
    Reference:
      description: |
        Reference object.
      type: object
      required:
        - href
      properties:
        relation:
          description: Description of the relation.
          type: string
        href:
          description: Determine the target URI of the related resource.
          type: string
          format: uri
          example: http://myservice.com/api/v1/describe
        type:
          description: Expected content type of the response of the reference.
          type: string
          example: application/json
        method:
          description: |
            HTTP verb to distinguish between several possible actions on the
            same ressource. GET if omitted.
          $ref: '#/components/schemas/ReferenceMethod'

    #
    # ReferenceMethod schema
    #
    ReferenceMethod:
      description: |
        HTTP verbs to access resources.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE

    #
    # Error schema
    #
    Error:
      description: |
        Error returned when request fails
      type: object
      required:
        - message
      properties:
        message:
          description: End user error description.
          type: string
        hint:
          description: Internal / developper error message (no trace).
          type: string
        correlationId:
          description: System request identifier from request header.
          type: string
        timestamp:
          description: Error timestamp.
          type: string