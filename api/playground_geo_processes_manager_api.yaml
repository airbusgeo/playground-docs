openapi: 3.0.0

#
# Info
#
info:
  title: Geo Processes Manager API for Intelligence Playground
  description: |
    Airbus Defence and Space "Geo Processes Manager" API specification for Intelligence Playground.

    The processes manager is reponsible for registering, monitoring and
    operating processes.

    A job is a unitary execution of a process.

    A process may be an unitary processing or a composition of several tasks.
    In the later case, the tasks workflow management can be specific to the process
    or delegated to the process manager which is also specific to the geo process
    manager implementation. Workflow implementation is not covered by this API.

    Results can be retrieved using another API. The job provides a link that allows the client
    to retrieve the full result of the job processing.

    This Playground specific implementation adds the concept of project and dataset to the 
    generic Airbus Defence and Space API by extending it.

  contact:
    name: Airbus Defence and Space Intelligence
    url: 'https://www.intelligence-airbusds.com/'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  x-logo:
    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png


#
# Servers
#
servers:
  - url: https://playground-api-gateway.playground.airbusds-geo.com
    description: Intelligence Playground production server


#
# Tags
#
tags:
  - name: Mandatory
    description: |
      Mandatory resources.
      Defines the main entry point of the service.
  - name: Catalog
    description: |
      Processes catalog.
  - name: Jobs
    description: |
      Processes execution management.

#
# Security
#
security:
  - bearerAuth: []

#
# Paths
#
paths:
  #
  # OpenAPI schema
  #
  /api/v1/openapi:
    get:
      tags:
        - Mandatory
      summary: Open API specification of this service in YAML format
      description: |
        Returns Open API specification of this service in YAML format.
        Subset of this API with implemented services.
      responses:
        '200':
          description: Geo Processes Manager API for Intelligence Playground.

  #
  # Process list and creation
  #
  /api/v1/processes:
    get:
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: "Page size. Default: 10. Max: 100."
          required: false
          schema:
            type: integer
      tags:
        - Catalog
      summary: List all available process services
      description: |
        Return the list of all registered process services that are available
        for current user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Processes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Catalog
      summary: Register a new process service
      description: Register a process service for further execution
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
      requestBody:
        description: |
          Process description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRef'
      responses:
        '201':
          description: Process has been registered
          headers:
            Location:
              schema:
                type: string
              description: URI of the created process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Process management
  #
  '/api/v1/processes/{processId}':
    get:
      tags:
        - Catalog
      summary: Find process by ID
      description: Return a single process
      parameters:
        - name: processId
          in: path
          description: ID of process to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Catalog
      summary: Update an existing process service
      description: Update an existing process service
      parameters:
        - name: processId
          in: path
          description: ID of process to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
      requestBody:
        description: |
          Process description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRef'
      responses:
        '201':
          description: Process has been updated
          headers:
            Location:
              schema:
                type: string
              description: URI of the updated process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Catalog
      summary: Delete a process
      description: |
        Definitively remove a process service from the platform. Note : This
        command will need great care as we do not want to remove a process
        which has associated jobs. Some preventive checks should be made
        here, the process itself should only be "marked for deletion" until
        we are sure we can remove it.
      parameters:
        - name: processId
          in: path
          description: Process ID to delete
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
        - name: datasetId
          in: query
          description: id of a dataset
          required: false
          schema:
            type: string
      responses:
        '202':
          description: Process marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessSummary'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job list for all processes
  #
  /api/v1/jobs:
    get:
      tags:
        - Jobs
      summary: List available jobs
      description: Return the list of all available jobs for this context
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: "Page size. Default: 10. Max: 100."
          required: false
          schema:
            type: integer
        - name: datasetId
          in: query
          description: id of a dataset
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Job list and creation for one process
  #
  '/api/v1/processes/{processId}/jobs':
    get:
      tags:
        - Jobs
      summary: List process' jobs
      description: Return the list of all process' jobs
      parameters:
        - name: processId
          in: path
          description: ID of process to get input return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
        - name: page
          in: query
          description: "Page number. Default: 1."
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: "Page size. Default: 10. Max: 100."
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Jobs
      summary: Request for a job execution
      description: Make a job request that should be queued for future execution
      parameters:
        - name: processId
          in: path
          description: ID of process to get input return
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: X-Correlation-ID
          description: System wide request identifier.
          schema:
            type: string
        - in: header
          name: X-ADS-Debug
          description: Enable debug mode.
          schema:
            type: boolean
      responses:
        '201':
          description: Job request queued
          headers:
            Location:
              schema:
                type: string
              description: URI of the job process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: |
          Process input parameters as defined by the JSON Schema in the input
          attribute of the description resource.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Input'

  #
  # Job management
  #
  '/api/v1/processes/{processId}/jobs/{jobId}':
    get:
      tags:
        - Jobs
      summary: Find jobs by ID
      description: Returns a single job
      parameters:
        - name: processId
          in: path
          description: ID of job's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: Kill any running job associated to this id and delete execution details
      parameters:
        - name: processId
          in: path
          description: ID of job's process
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          description: ID of job to delete
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: projectId
          required: true
          schema:
            type: string
            format: uuid
          description: Playground project ID.
      responses:
        '202':
          description: Job marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSummary'
        '204':
          description: Job killed and removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescribe'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

#
# Components
#
components:

  #
  # Security
  #
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #
  # Schemas
  #
  schemas:

    #
    # Processes schema
    #
    Processes:
      type: object
      properties:
        processes:
          type: array
          items:
            $ref: '#/components/schemas/ProcessSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'

    #
    # ProcessRef schema
    #
    ProcessRef:
      description: |
        Reference to a new process (docker image or external instance that
        exposes a valid describe API endpoint).
      type: object
      required:
        - type
        - reference
      properties:
        type:
          description: Reference type
          type: string
          enum:
            - dockerImage
            - externalInstance
          example: dockerImage
        reference:
          description: Reference value
          type: string
          example: 'eu.gcr.io/myproject/cat-detection:latest'

    #
    # ProcessSummary schema
    #
    ProcessSummary:
      description: |
        Process summary.
      type: object
      required:
        - id
        - title
        - family
        - version
        - description
        - _links
      properties:
        id:
          description: Unique identifier of the process (usually an uuid).
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        title:
          description: The title of the process.
          type: string
          example: 'Cat detection'
        family:
          description: The process family.
          type: string
          example: object-detection
        version:
          description: The version of the process.
          type: string
          example: 1.0
        description:
          description: The description of the process.
          type: string
          example: 'Detect cats on tiles'
        organization:
          description: Identifier of the organization or entity publishing the process.
          type: string
          example: 'Airbus DS Intelligence'
        email:
          description: Contact email.
          type: string
          format: email
          example: 'cat-detection@airbus.com'
        keywords:
          description: List of keywords.
          type: array
          items:
            type: string
          example: ['cat', 'dog']
        _links:
          $ref: 'shared.yaml#/components/schemas/ItemLinks'
    #
    # ProcessDescribe schema
    #
    ProcessDescribe:
      description: |
        Process description.
      type: object
      required:
        - id
        - name
        - title
        - family
        - version
        - description
        - organization
        - email
        - requirements
        - capabilities
        - output
        - _links
      properties:
        id:
          description: Unique identifier of the process (usually an uuid).
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        title:
          description: The title of the process.
          type: string
          example: 'Cat detection'
        family:
          description: The process family.
          type: string
          example: object-detection
        version:
          description: The version of the process.
          type: string
          example: 1.0
        description:
          description: The description of the process.
          type: string
          example: 'Detect cats on tiles'
        organization:
          description: Identifier of the organization or entity publishing the process.
          type: string
          example: 'Airbus DS Intelligence'
        email:
          description: Contact email.
          type: string
          format: email
          example: 'cat-detection@airbus.com'
        keywords:
          description: List of keywords.
          type: array
          items:
            type: string
          example: ['cat', 'dog']
        requirements:
          # Requirements of the process service
          $ref: 'shared.yaml#/components/schemas/Requirements'
        capabilities:
          # Capabilities of the process service
          $ref: 'shared.yaml#/components/schemas/Capabilities'
        output:
          # Process execution output interface.
          $ref: 'shared.yaml#/components/schemas/ProcessOutput'
        _links:
          $ref: 'shared.yaml#/components/schemas/ItemLinks'

    #
    # Jobs schema
    #
    Jobs:
      type: object
      required:
        - jobs
        - _links
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobSummary'
        count:
          type: integer
          example: 1
        total:
          type: integer
          example: 1
        _links:
          $ref: '#/components/schemas/NavLinks'

    #
    # JobSummary schema
    #
    JobSummary:
      type: object
      required:
        - processId
        - id
        - creationDate
      properties:
        creationDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        startDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        endDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        processId:
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        id:
          type: string
          format: uuid
          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
        nbTasks:
          type: integer
          example: 4
        nbTasksPerStatus:
          type: array
          items:
            $ref: '#/components/schemas/TaskCountByStatus'
        _links:
          $ref: '#/components/schemas/ItemLinks'

    #
    # JobDescribe schema
    #
    JobDescribe:
      type: object
      required:
        - processId
        - id
        - creationDate
        - status
      properties:
        creationDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        startDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        endDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        processId:
          type: string
          format: uuid
          example: 15c61933-0b06-442c-8bab-723b2b41f570
        id:
          type: string
          format: uuid
          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b
        status:
          $ref: '#/components/schemas/Status'
        message:
          type: string
          example: process image 12345
        nbTasks:
          type: integer
          example: 4
        nbTasksPerStatus:
          type: array
          items:
            $ref: '#/components/schemas/TaskCountByStatus'
        userMetadatas:
          $ref: '#/components/schemas/Metadatas'
        input:
          $ref: '#/components/schemas/Input'
        asynchronous:
          description: True if asynchronous mode provided.
          type: boolean
          default: false
          example: false
        _links:
          $ref: '#/components/schemas/JobLinks'

    #
    # Status schema
    #
    Status:
      description: |
        Status of a process execution
      type: object
      required:
        - status
        - progress
      properties:
        status:
          description: Status of this execution.
          type: string
          default: UNKNOWN
          enum:
            - UNKNOWN
            - ACCEPTED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - CANCELLED
            - PAUSED
          example: SUCCEEDED
        progress:
          description: Progress in % of this execution.
          type: integer
          example: 100

    #
    # NavLinks schema
    #
    NavLinks:
      description: |
        Links to related resources.
      type: object
      required:
        - self
      properties:
        self:
          description: Current page reference.
          $ref: '#/components/schemas/Reference'
        next:
          description: Next page reference.
          $ref: '#/components/schemas/Reference'
        prev:
          description: Previous page reference
          $ref: '#/components/schemas/Reference'
        first:
          description: First page reference.
          $ref: '#/components/schemas/Reference'
        last:
          description: Last page reference
          $ref: '#/components/schemas/Reference'

    #
    # ItemLinks schema
    #
    ItemLinks:
      description: |
        Links for single resource.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'

    #
    # ProcessLinks schema
    #
    ProcessLinks:
      description: |
        Links for single process.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'
        jobs:
          description: List of associated jobs.
          $ref: '#/components/schemas/Reference'
        runNewJob:
          description: POST ressource to launch a job for this process.
          $ref: '#/components/schemas/Reference'
        update:
          description: PUT ressource to update this process.
          $ref: '#/components/schemas/Reference'
        delete:
          description: DELETE ressource to delete this process.
          $ref: '#/components/schemas/Reference'

    #
    # JobLinks schema
    #
    JobLinks:
      description: |
        Links for single job.
      type: object
      required:
        - self
      properties:
        self:
          description: Current resource reference.
          $ref: '#/components/schemas/Reference'
        list:
          description: List similar resource references.
          $ref: '#/components/schemas/Reference'
        tasks:
          description: List of associated tasks.
          $ref: '#/components/schemas/Reference'
        runNewJob:
          description: POST ressource to launch a new job for this process.
          $ref: '#/components/schemas/Reference'
        delete:
          description: DELETE ressource to delete this job.
          $ref: '#/components/schemas/Reference'
        zone:
          description: Get associated zone.
          $ref: '#/components/schemas/Reference'
        recordsAsGeojson:
          description: Download a GeoJSON file of generated records.
          $ref: '#/components/schemas/Reference'

    #
    # Reference schema
    #
    Reference:
      description: |
        Reference object.
      type: object
      required:
        - href
      properties:
        relation:
          description: Description of the relation.
          type: string
          example: myrelation
        href:
          description: Determine the target URI of the related resource.
          type: string
          format: uri
          example: |
            http://myservice.com/api/v1/processes/15c61933-0b06-442c-8bab-723b2b41f570
        type:
          description: Expected content type of the response of the reference.
          type: string
          example: application/json
        method:
          description: |
            HTTP verb to distinguish between several possible actions on the
            same ressource. GET if omitted.
          $ref: '#/components/schemas/ReferenceMethod'

    #
    # ReferenceMethod schema
    #
    ReferenceMethod:
      description: |
        HTTP verbs to access resources.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
      example: GET

    #
    # Error schema
    #
    Error:
      description: |
        Error returned when request fails
      type: object
      required:
        - message
      properties:
        message:
          description: End user error description.
          type: string
          example: Something went wrong!
        hint:
          description: Internal / developper error message (no trace).
          type: string
          example: Class CatDetection threw an exception on line 125
        correlationId:
          description: System request identifier from request header.
          type: string
          example: run-1258
        timestamp:
          description: Error timestamp.
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
